# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-11-02 15:18
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='articles_about',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('published_at', models.DateField(blank=True, null=True, verbose_name='Date of publishing')),
                ('url', models.URLField(blank=True, max_length=300, null=True, verbose_name='URL')),
                ('abstract', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'ordering': ('published_at',),
                'verbose_name': 'artilce',
                'verbose_name_plural': 'articles',
            },
        ),
        migrations.CreateModel(
            name='corrode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='default', max_length=100)),
                ('description', models.CharField(blank=True, default='nobady wrote yet', max_length=200, null=True)),
            ],
            options={
                'verbose_name': 'etching agent',
                'verbose_name_plural': 'etching agents',
            },
        ),
        migrations.CreateModel(
            name='Crystal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='which crystal')),
                ('syngony_name', models.CharField(choices=[('Triclinic', 'Triclinic'), ('Monoclinic', 'Monoclinic'), ('Orthorhombic', 'Orthorhombic'), ('Tetragonal', 'Tetragonal'), ('Trigonal', 'Trigonal'), ('Hexagonal', 'Hexagonal'), ('Cubic', 'Cubic')], default='indefinited', max_length=15)),
                ('a_parametr', models.DecimalField(decimal_places=4, max_digits=7, verbose_name='a, angrtem')),
                ('b_parametr', models.DecimalField(decimal_places=4, max_digits=7, verbose_name='b, angrtem')),
                ('c_parametr', models.DecimalField(decimal_places=4, max_digits=7, verbose_name='c, angrtem')),
                ('alfa', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='alfa, degrees')),
                ('beta', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='beta, degrees')),
                ('gamma', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='gamma, degrees')),
                ('rho', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='density, gr/cm3')),
                ('file_f', models.FileField(blank=True, null=True, upload_to='article')),
                ('created_at', models.DateField(verbose_name='when it created')),
            ],
            options={
                'ordering': ('created_at',),
                'verbose_name': 'Crystal',
                'verbose_name_plural': 'Crystals',
            },
        ),
        migrations.CreateModel(
            name='file_converter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_f', models.FileField(blank=True, null=True, upload_to='some')),
                ('info', models.CharField(blank=True, max_length=200, null=True)),
                ('project', models.CharField(max_length=10)),
                ('converter_result', models.ImageField(blank=True, null=True, upload_to='some/converter')),
                ('converter_result_2', models.ImageField(blank=True, null=True, upload_to='some/converter')),
                ('converter_file_path', models.CharField(blank=True, max_length=50, null=True)),
                ('converter_file_URL', models.URLField(blank=True, max_length=300, null=True, verbose_name='URL')),
                ('half_width_1', models.CharField(blank=True, max_length=10, null=True)),
                ('half_width_2', models.CharField(blank=True, max_length=10, null=True)),
                ('center_1', models.CharField(blank=True, max_length=10, null=True)),
                ('center_2', models.CharField(blank=True, max_length=10, null=True)),
                ('max1', models.CharField(blank=True, max_length=10, null=True)),
                ('max2', models.CharField(blank=True, max_length=10, null=True)),
                ('Voigt_model_report_1', models.CharField(blank=True, max_length=500, null=True)),
                ('Voigt_model_report_2', models.CharField(blank=True, max_length=500, null=True)),
                ('file_converted1', models.FileField(blank=True, null=True, upload_to='some/converter')),
                ('file2_converted2', models.FileField(blank=True, null=True, upload_to='some/converter')),
                ('dated', models.DateField(blank=True, null=True, verbose_name='dated')),
                ('time', models.DateTimeField(blank=True, null=True, verbose_name='timed')),
                ('temperature', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='g/cm3')),
            ],
            options={
                'verbose_name': 'converter_file',
                'verbose_name_plural': 'converter_files',
            },
        ),
        migrations.CreateModel(
            name='group_theory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('slug', models.SlugField(blank=True, null=True)),
            ],
            options={
                'verbose_name': '\u041a\u0430\u043a\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b (theory)',
            },
        ),
        migrations.CreateModel(
            name='order_terms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=1, max_digits=7, verbose_name='\u0446\u0435\u043d\u0430, rubles')),
                ('corrode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='CRDB.corrode')),
                ('crystal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='CRDB.Crystal')),
            ],
            options={
                'ordering': ('price',),
                'verbose_name': 'order_terms',
                'verbose_name_plural': 'order_terms',
            },
        ),
        migrations.CreateModel(
            name='organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('adress', models.CharField(max_length=400)),
                ('e_mail', models.EmailField(max_length=254)),
                ('phone_number', models.CharField(max_length=10)),
                ('corrode', models.ManyToManyField(through='CRDB.order_terms', to='CRDB.corrode')),
                ('crystal', models.ManyToManyField(through='CRDB.order_terms', to='CRDB.Crystal')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
            },
        ),
        migrations.CreateModel(
            name='periodic_table',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=20, null=True)),
                ('abbriviation', models.CharField(blank=True, max_length=20, null=True)),
                ('group', models.CharField(blank=True, max_length=20, null=True)),
                ('period', models.IntegerField(blank=True, null=True)),
                ('atomic_weight', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='g/mole')),
                ('density', models.DecimalField(blank=True, decimal_places=7, max_digits=12, null=True, verbose_name='g/cm3')),
                ('observed_el_configure', models.CharField(blank=True, max_length=50, null=True)),
                ('atomic_radius', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='radius, A')),
                ('crystal_structure', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ('number',),
                'verbose_name': 'chemical element',
                'verbose_name_plural': 'chemical elements',
            },
        ),
        migrations.CreateModel(
            name='project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_name', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('number', models.IntegerField(unique=True)),
                ('url', models.URLField(blank=True, max_length=300, null=True, verbose_name='URL')),
                ('likes', models.ManyToManyField(related_name='likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('project_name',),
                'verbose_name': 'project',
                'verbose_name_plural': 'projects',
            },
        ),
        migrations.CreateModel(
            name='suggest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(blank=True, max_length=300, null=True)),
                ('executed', models.BooleanField()),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='CRDB.project')),
            ],
            options={
                'verbose_name': 'suggestion',
                'verbose_name_plural': 'suggestions',
            },
        ),
        migrations.CreateModel(
            name='theory_models',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
                ('files', models.FileField(blank=True, null=True, upload_to='theory')),
                ('description', models.CharField(blank=True, max_length=1200, null=True)),
                ('published_at', models.DateField(blank=True, null=True, verbose_name='Date of publishing')),
            ],
            options={
                'ordering': ('published_at',),
                'verbose_name': '\u0422\u0435\u043e\u0440\u0438\u044f',
                'verbose_name_plural': '\u0422\u0435\u043e\u0440\u0438\u044f',
            },
        ),
        migrations.AddField(
            model_name='order_terms',
            name='organisation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CRDB.organization'),
        ),
        migrations.AddField(
            model_name='group_theory',
            name='theory',
            field=models.ManyToManyField(blank=True, default='No', to='CRDB.theory_models'),
        ),
        migrations.AddField(
            model_name='crystal',
            name='chem_elements',
            field=models.ManyToManyField(to='CRDB.periodic_table'),
        ),
        migrations.AddField(
            model_name='corrode',
            name='composition',
            field=models.ManyToManyField(to='CRDB.periodic_table', verbose_name='composition'),
        ),
        migrations.AddField(
            model_name='corrode',
            name='to_crystal',
            field=models.ManyToManyField(to='CRDB.Crystal'),
        ),
        migrations.AddField(
            model_name='articles_about',
            name='to_crystal',
            field=models.ManyToManyField(to='CRDB.Crystal'),
        ),
    ]
